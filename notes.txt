
objects
-------
*** Everything in python is object ***
*** Every object contains methods*****


number
---------
number can be integer or decimal or octal or hexa.

aval = 10
bval  = 23.32


string
-------
string is defined in single or double or triple quotes.


aname = 'python programming'
bname = "network programming"
cname = """rest apis"""


list ( array in C )
---------------------
list contains set of elements.
Elements can be numbers or strings or any combination

alist = [ 10,20,30]
blist = ["python","perl",45.34,"java"]


tuple  ( immutable , unchangable , uneditable )
---------
tuple contains set of elements.
Elements can be numbers or strings or any 
******  Elements inside tuple cannot be modified DIRECTLY ******

atup  = (34,32)
btup  = (87,23,23,"java")


dictionary   ( hash map in java , hash in perl , json)
----------------------------------------------------------------
dictionary contains key and value pairs
In dictionary..  key can be integer or string to uniquely identity the value.
                 value can be number or string or list or tuple or dictionary or any other complex data structure.

syntax:     object = { key:value , key:value ... }
example:      book = {"chap1":10 ,"chap2":20 }
              info = {"chap1":[10,"RIta","US"],"chap2":[20,"Rao","Ind"] }




set
-----
set contains unordered collection of unique values of same type.








level1
level1
level1
level1
if cond:
    level2
    level2
    level2
    level2
level1
level1
level1






level1
level1
level1
level1
if cond:
    level2
    level2
    if cond:
	level3
	level3
	level3

level1
level1
level1

classification of objects
---------------------------


mutable objects :   list dictionary set

immutable objects:  number  string   tuple


builtin functions   ( in the console     just type   dir(__builtin__)   --> will display all the exceptions and funcs
------------------
print()
len()
range()
help()
dir()
type()
isinstance()
input()
max()
min()
sum()
round()
ord()
chr()
open()
 


conversion functions   ( converting from one object to another object )
--------------------
str()
int()
float()
oct()
hex()
list()
tuple()
dict()
set()


file handling
----------------

working with flat files  ( .csv  .conf .log  .txt .properties ....... )
-----------------------------------------------------------------------

read
write
append


opening the file
------------------

syntax:    object = open(filename,mode)
example:     fobj = open("customers.txt","r")
             # the file should exist in order to read the file


             fobj = open("customers.txt","w")
             case1: if the file is not existing... file gets created first
             case2: if the file is already existing ..... it overwrites the existing content


             fobj = open("customers.txt","a")
             case1: if the file is not existing... file gets created first
             case2: if the file is already ..... it appends the content to the end of the file


closing the file
------------------
fobj.close()



read operation
---------------

- reading line by line using file object
- fobj.read()
- fobj.readlines()
- using csv library
- using pandas library





























working with third party files ( docx pdf mp4  pptx zip rar ......)

















write a program to display all the lines from realestate.csv
---------------------------------------------------------------------------

write a program to display street and city columns data from realestate.csv

---------------------------------------------------------------------------


write a  program to display all the unique cities from the file

---------------------------------------------------------------------------
write a  program to display all the unique cities and its count from the file


SACRAMENTO - 343 times
RIO LINDA  -  32 times
..
..

---------------------------------------------------------------------------
write a program to replace the lines containing

SACRAMENTO  with HYDERABAD
RIO LINDA  with BANGALORE

and write the output to 07_Jun_2022.csv



exception handling
---------------------

There are 2 types of errors

1. syntax error
2. semantic error or runtime error

Handling the errors in the runtime ( execution time ) is known as exception handling.


try     
except
else    ( optional)
finally ( optional)
raise   ( raise exceptions wantedly )


function | definition | subroutine  | submodule
---------------------------------------
- reusability purpose
- we define the code once and call it for multiple times.


- builtin functions   (    dir(__builtin__)    )




- user defined function
-------------------------



passing parameters
------------------

fixed arguments
default arguments
keyword arguments
variable length arguments






conda create --name devenv python=3.8.5





builtin libraries which are generally used
----------------------------------------
sys           : system python config information
urllib.request: working with http
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
pysftp
telnetlib     :
logging       : logging all the events
shutil        : copy,move,rmtree ....
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml        
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files
re            : validating the strings  ( grep awk sed )
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing:
subprocess    : invoking the system commands ( linux or dos commands)



frequently used third party libraries
---------------------------------------
database related
----------------
pymysql   :
cx_Oracle
pymongo
pymssql

web frameworks ( developing web applications)
--------------
django
flask
bottom

analytics/machine learning
---------------------------
numpy
scipy
pandas
seaborn
plotly
ggplot
matplotlib   : visualizing data .. bar graph.. pie graph
scikit-learn :  machine learning algorithms

image processing
---------------
pillow
opencv
pytorch


APIs ( REST API)
-----
requests

excel programming
------------------
openpyxl    : reading/write excel files
xlsxwriter  : writing to excel file
python-docx : working with ms-word
pandas

networking
-----------
paramiko   :  interacting with remote servers
netmiko    :  connecting to router/switch
pyping     :  ping any host or ip address









built-in libraries ( in spyder 8000+ libraries are installed by default)
                   ( in IDLE   3000+ libraries are installed )
-------------------
All the bulitin libraries which are generally used( OS operations, date and time operations , ftp operations, maths operations , string operations ....) are installed with python setup



third party libraries
---------------------
Depending on the requirement( network automation , data analytics , cloud automation , excel operations , database operations ...) developer has to install the third party librarary using


- pip tool
- conda tool
- downloading and installing it manually from www.pypi.org
- your local repository ( org specific)



re library
-------------

- re.search something in the string
- re.match ( beginning of the string)
- re.sub   ( replace patterns)
- re.findall ( find all the patterns)
- re.split   ( split the string based on pattern)


wildcard characters or metacharacters
----------------------------------------

^  $   *  +  .  ?   () []  {}   \d \n \s 


^ :  match at the beginning of the string
     if re.search("^python programming",line):


$ : match at the end of the string
    if re.search("python programming$",line):

* : zero or more occurences of the preceding character
    if re.search("pyt*hon programming",line):


+ : one or more occurences of the preceding character
    if re.search("pyt+hon programming",line):


.  : any single character or digit
     if re.search(".ython",line):

?  : either zero or one occurence of the preceding character


[]  : character class ( one single character)


(pattern1|pattern2) :  grouping
import re
with open("languages.txt","r") as fobj:
    for line in fobj:
        line = line.strip()
        if re.search("python|java",line):
            print(line)
                

{min,max} :  min to max occurences of the preceding character


 if re.search("pyt{1,5}hon programming",line):

 python
 pytttthon
 pyttttthon
 pyttttttttthon   -> Invalid

\d : digit
\s : space
\w : word boundary






 if re.search("pyt{1,}hon programming",line):   # minium one time and max can be any no. of times
 python
 pytttthon
 pyttttthon
 pyttttttttthon 


 if re.search("pyt{3}hon programming",line):    # exactly 3 times
 python
 pytttthon
 pyttttthon
 pyttttttttthon 














 


mysql commands
----------------------

display all existing databases
--------------------------------
show databases ;

create database
--------------------
create database jpmc;

access your database
--------------------------
use jpmc;

display tables in your database  ( initialy it is empty )
----------------------------------
show tables ;

creating table
----------------
create table realestate( street varchar(100) , city varchar(100) );


inserting records
------------------
insert into realestate values('Hitechcity','Hyderabad');
insert into realestate values('MG Road','Bangalore');

display all the records
-----------------------
select * from realestate ;


look at your table structure
-------------------------------
desc realestate;




procedural programming
-----------------------
-top down approach
- methods, functions, userdefined functions


object oriented programming
-----------------------------
- resusability purpose


- class
- object
- self
- super
- access specifiers
- inheritance
- polymorphism


class :
-----------
class is just like blueprint of the model
Every class contains data members(variables) and member functions
every class shares the common properties for all the objects.
( alist and blist are going are have same methods )

object
-------
object is the instance of the class


self
-----
self is the instance of the object

self will the fist argument in the class methods



constructor
--------------
constuctor will be invoked automatically when the object is created

















 





































































